@startuml gameClassDiagram

    skinparam classAttributeIconSize 0

    gameMenu.ResetHighScoreDialog --> javax.swing.JDialog : extends
    gameMenu.Menu --> javax.swing.JFrame : extends
    gameWin.GameWin --> javax.swing.JFrame : extends
    gameWin.GamePanel --> javax.swing.JPanel : extends
    gameWin.ScorePanel --> javax.swing.JPanel : extends

    gameWin.GamePanel --|> java.awt.event.KeyListener : implements
    gameWin.ScorePanel --|> gameWin.ScoreListener : implements

    gameWin.GameWin --* gameWin.ScorePanel : child-component
    gameWin.GameWin --* gameWin.GamePanel : child-component

    gameMenu.Menu -left-* gameWin.GameWin : imports
    gameWin.GamePanel --* highscore.HighScore : imports
    gameWin.GamePanel --* gameWin.ScoreListener : imports
    main.Main --* gameMenu.Menu : imports

    package main {
        class Main
    }

    package gameMenu {
        class gameMenu.Menu
        class gameMenu.ResetHighScoreDialog
    }

    package gameWin {
        class gameWin.GameWin
        class gameWin.GamePanel
        class gameWin.ScorePanel
        interface gameWin.ScoreListener

    }

    package javax.swing {
        class javax.swing.JFrame
        class javax.swing.JDialog
        class javax.swing.JPanel
    }

    package java.awt.event {
        interface java.awt.event.KeyListener
    }

    class main.Main {
        +void main(String[])
    }

    class gameMenu.Menu {
        -final int {static} SCREEN_WIDTH
        -final int {static} SCREEN_HEIGHT
        
        -final int {static} SMALL
        -final int {static} MEDIUM
        -final int {static} LARGE
        
        -final int {static} EASY
        -final int {static} NORMAL
        -final int {static} HARD

        -JPanel mainPanel
        -JPanel startPanel
        -JPanel choicePanel
        -JPanel mapPanel
        -JPanel difficultyPanel
        -JPanel endPanel

        -ButtonGroup mapGroup
        -ButtonGroup difficultyGroup

        -JRadioButton mapSize_small
        -JRadioButton mapSize_medium
        -JRadioButton mapSize_large

        -JRadioButton difficulty_easy
        -JRadioButton difficulty_normal
        -JRadioButton difficulty_hard

        -JLabel title
        -JLabel instructions
        -JLabel mapLabel
        -JLabel difficultyLabel

        -JButton resetHighScoreBtn

        +Menu()
        +void addChooseMap()
        +void addChooseDifficulty()
        +void addBtnFunctionality()
        +void addStyle()
    }

    class gameMenu.ResetHighScoreDialog {
        -JPanel mainPanel
        -JPanel btnPanel
        -JLabel prompt
        -JButton yesBtn
        -JButton cancelBtn

        +ResetHighScoreDialog()
        +void addStyle()
    }

    class gameWin.GamePanel {
        -final int {static} SCREEN_WIDTH
        -final int {static} SCREEN_HEIGHT

        -final int unitSize
        -final int gameUnits
        -final int delay
        -final int[] snakeX
        -final int[] snakeY
        -final String fontName

        -int appleX
        -int appleY
        
        -int bodyParts
        -int score
        -char direction
        -boolean running
        -boolean paused
        -Timer timer
        -Random random
        -ScoreListener scoreListener

        +GamePanel(int unitSize, int delay, ScoreListener scoreListener)
        -void startGame()
        -void initialState()
        -void updateScore()
        -void updateHighscore()
        -void spawnApple()
        -void eatApple()
        -void move()
        -void checkCollisions()
        -void togglePause()
        -void pauseGame()
        -void resetGame()
        -void gotoMenu()
        -void draw(Graphics g)
        -void gameOver(Graphics g)
        #void paintComponent(Graphics g)
        +void actionPerformed()
        +void keyPressed(KeyEvent e)
        +void keyTyped(KeyEvent e)
        +void keyReleased(KeyEvent e)
    }

    class gameWin.ScorePanel {
        -JLabel scoreLabel
        
        +ScorePanel()
        +void updateScore(int score)
        #void addStyle()
    }

    class gameWin.GameWin {
        -JPanel mainPanel
        -ScorePanel scorePanel
        -GamePanel gamePanel

        +GameWin()
        +void addStyle()
    }

    interface gameWin.ScoreListener {
        +void updateScore(int newHighscore)
    }

@enduml
